CompilationUnitSyntax (CompilationUnit)
Code: using Game;
using System;
using System.Collections.Generic;
using Console = Game.Console;

public class Test
{
	public int Add(int a, int b)
	{
		int result = a + b;
		Console.WriteLine(result);
		for(int i = 0; i < 10; i++)
		{
			result = Double(result);
		}
		
		return result;
	}

	private int Double(int n)
	{
		return n * 2;
	}
}
    UsingDirectiveSyntax (UsingDirective)
    Code: using Game;
        IdentifierNameSyntax (IdentifierName)
        Code: Game
    UsingDirectiveSyntax (UsingDirective)
    Code: using System;
        IdentifierNameSyntax (IdentifierName)
        Code: System
    UsingDirectiveSyntax (UsingDirective)
    Code: using System.Collections.Generic;
        QualifiedNameSyntax (QualifiedName)
        Code: System.Collections.Generic
            QualifiedNameSyntax (QualifiedName)
            Code: System.Collections
                IdentifierNameSyntax (IdentifierName)
                Code: System
                IdentifierNameSyntax (IdentifierName)
                Code: Collections
            IdentifierNameSyntax (IdentifierName)
            Code: Generic
    UsingDirectiveSyntax (UsingDirective)
    Code: using Console = Game.Console;
        NameEqualsSyntax (NameEquals)
        Code: Console =
            IdentifierNameSyntax (IdentifierName)
            Code: Console
        QualifiedNameSyntax (QualifiedName)
        Code: Game.Console
            IdentifierNameSyntax (IdentifierName)
            Code: Game
            IdentifierNameSyntax (IdentifierName)
            Code: Console
    ClassDeclarationSyntax (ClassDeclaration)
    Code: public class Test
{
	public int Add(int a, int b)
	{
		int result = a + b;
		Console.WriteLine(result);
		for(int i = 0; i < 10; i++)
		{
			result = Double(result);
		}
		
		return result;
	}

	private int Double(int n)
	{
		return n * 2;
	}
}
        MethodDeclarationSyntax (MethodDeclaration)
        Code: public int Add(int a, int b)
	{
		int result = a + b;
		Console.WriteLine(result);
		for(int i = 0; i < 10; i++)
		{
			result = Double(result);
		}
		
		return result;
	}
            PredefinedTypeSyntax (PredefinedType)
            Code: int
            ParameterListSyntax (ParameterList)
            Code: (int a, int b)
                ParameterSyntax (Parameter)
                Code: int a
                    PredefinedTypeSyntax (PredefinedType)
                    Code: int
                ParameterSyntax (Parameter)
                Code: int b
                    PredefinedTypeSyntax (PredefinedType)
                    Code: int
            BlockSyntax (Block)
            Code: {
		int result = a + b;
		Console.WriteLine(result);
		for(int i = 0; i < 10; i++)
		{
			result = Double(result);
		}
		
		return result;
	}
                LocalDeclarationStatementSyntax (LocalDeclarationStatement)
                Code: int result = a + b;
                    VariableDeclarationSyntax (VariableDeclaration)
                    Code: int result = a + b
                        PredefinedTypeSyntax (PredefinedType)
                        Code: int
                        VariableDeclaratorSyntax (VariableDeclarator)
                        Code: result = a + b
                            EqualsValueClauseSyntax (EqualsValueClause)
                            Code: = a + b
                                BinaryExpressionSyntax (AddExpression)
                                Code: a + b
                                    IdentifierNameSyntax (IdentifierName)
                                    Code: a
                                    IdentifierNameSyntax (IdentifierName)
                                    Code: b
                ExpressionStatementSyntax (ExpressionStatement)
                Code: Console.WriteLine(result);
                    InvocationExpressionSyntax (InvocationExpression)
                    Code: Console.WriteLine(result)
                        MemberAccessExpressionSyntax (SimpleMemberAccessExpression)
                        Code: Console.WriteLine
                            IdentifierNameSyntax (IdentifierName)
                            Code: Console
                            IdentifierNameSyntax (IdentifierName)
                            Code: WriteLine
                        ArgumentListSyntax (ArgumentList)
                        Code: (result)
                            ArgumentSyntax (Argument)
                            Code: result
                                IdentifierNameSyntax (IdentifierName)
                                Code: result
                ForStatementSyntax (ForStatement)
                Code: for(int i = 0; i < 10; i++)
		{
			result = Double(result);
		}
                    VariableDeclarationSyntax (VariableDeclaration)
                    Code: int i = 0
                        PredefinedTypeSyntax (PredefinedType)
                        Code: int
                        VariableDeclaratorSyntax (VariableDeclarator)
                        Code: i = 0
                            EqualsValueClauseSyntax (EqualsValueClause)
                            Code: = 0
                                LiteralExpressionSyntax (NumericLiteralExpression)
                                Code: 0
                    BinaryExpressionSyntax (LessThanExpression)
                    Code: i < 10
                        IdentifierNameSyntax (IdentifierName)
                        Code: i
                        LiteralExpressionSyntax (NumericLiteralExpression)
                        Code: 10
                    PostfixUnaryExpressionSyntax (PostIncrementExpression)
                    Code: i++
                        IdentifierNameSyntax (IdentifierName)
                        Code: i
                    BlockSyntax (Block)
                    Code: {
			result = Double(result);
		}
                        ExpressionStatementSyntax (ExpressionStatement)
                        Code: result = Double(result);
                            AssignmentExpressionSyntax (SimpleAssignmentExpression)
                            Code: result = Double(result)
                                IdentifierNameSyntax (IdentifierName)
                                Code: result
                                InvocationExpressionSyntax (InvocationExpression)
                                Code: Double(result)
                                    IdentifierNameSyntax (IdentifierName)
                                    Code: Double
                                    ArgumentListSyntax (ArgumentList)
                                    Code: (result)
                                        ArgumentSyntax (Argument)
                                        Code: result
                                            IdentifierNameSyntax (IdentifierName)
                                            Code: result
                ReturnStatementSyntax (ReturnStatement)
                Code: return result;
                    IdentifierNameSyntax (IdentifierName)
                    Code: result
        MethodDeclarationSyntax (MethodDeclaration)
        Code: private int Double(int n)
	{
		return n * 2;
	}
            PredefinedTypeSyntax (PredefinedType)
            Code: int
            ParameterListSyntax (ParameterList)
            Code: (int n)
                ParameterSyntax (Parameter)
                Code: int n
                    PredefinedTypeSyntax (PredefinedType)
                    Code: int
            BlockSyntax (Block)
            Code: {
		return n * 2;
	}
                ReturnStatementSyntax (ReturnStatement)
                Code: return n * 2;
                    BinaryExpressionSyntax (MultiplyExpression)
                    Code: n * 2
                        IdentifierNameSyntax (IdentifierName)
                        Code: n
                        LiteralExpressionSyntax (NumericLiteralExpression)
                        Code: 2
