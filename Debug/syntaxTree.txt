CompilationUnitSyntax (CompilationUnit)
Code: using Game;
using System;
using System.Collections.Generic;
using Console = Game.Console;
using Crane = Game.Crane;

public class SafeSecurity
{
	public void OpenSafeButton()
	{
		bool locked = false;
		if(locked)
		{
			Safe.Alarm();
		}
		else
		{
			Safe.Open();
		}
	}
}
    UsingDirectiveSyntax (UsingDirective)
    Code: using Game;
        IdentifierNameSyntax (IdentifierName)
        Code: Game
    UsingDirectiveSyntax (UsingDirective)
    Code: using System;
        IdentifierNameSyntax (IdentifierName)
        Code: System
    UsingDirectiveSyntax (UsingDirective)
    Code: using System.Collections.Generic;
        QualifiedNameSyntax (QualifiedName)
        Code: System.Collections.Generic
            QualifiedNameSyntax (QualifiedName)
            Code: System.Collections
                IdentifierNameSyntax (IdentifierName)
                Code: System
                IdentifierNameSyntax (IdentifierName)
                Code: Collections
            IdentifierNameSyntax (IdentifierName)
            Code: Generic
    UsingDirectiveSyntax (UsingDirective)
    Code: using Console = Game.Console;
        NameEqualsSyntax (NameEquals)
        Code: Console =
            IdentifierNameSyntax (IdentifierName)
            Code: Console
        QualifiedNameSyntax (QualifiedName)
        Code: Game.Console
            IdentifierNameSyntax (IdentifierName)
            Code: Game
            IdentifierNameSyntax (IdentifierName)
            Code: Console
    UsingDirectiveSyntax (UsingDirective)
    Code: using Crane = Game.Crane;
        NameEqualsSyntax (NameEquals)
        Code: Crane =
            IdentifierNameSyntax (IdentifierName)
            Code: Crane
        QualifiedNameSyntax (QualifiedName)
        Code: Game.Crane
            IdentifierNameSyntax (IdentifierName)
            Code: Game
            IdentifierNameSyntax (IdentifierName)
            Code: Crane
    ClassDeclarationSyntax (ClassDeclaration)
    Code: public class SafeSecurity
{
	public void OpenSafeButton()
	{
		bool locked = false;
		if(locked)
		{
			Safe.Alarm();
		}
		else
		{
			Safe.Open();
		}
	}
}
        MethodDeclarationSyntax (MethodDeclaration)
        Code: public void OpenSafeButton()
	{
		bool locked = false;
		if(locked)
		{
			Safe.Alarm();
		}
		else
		{
			Safe.Open();
		}
	}
            PredefinedTypeSyntax (PredefinedType)
            Code: void
            ParameterListSyntax (ParameterList)
            Code: ()
            BlockSyntax (Block)
            Code: {
		bool locked = false;
		if(locked)
		{
			Safe.Alarm();
		}
		else
		{
			Safe.Open();
		}
	}
                LocalDeclarationStatementSyntax (LocalDeclarationStatement)
                Code: bool locked = false;
                    VariableDeclarationSyntax (VariableDeclaration)
                    Code: bool locked = false
                        PredefinedTypeSyntax (PredefinedType)
                        Code: bool
                        VariableDeclaratorSyntax (VariableDeclarator)
                        Code: locked = false
                            EqualsValueClauseSyntax (EqualsValueClause)
                            Code: = false
                                LiteralExpressionSyntax (FalseLiteralExpression)
                                Code: false
                IfStatementSyntax (IfStatement)
                Code: if(locked)
		{
			Safe.Alarm();
		}
		else
		{
			Safe.Open();
		}
                    IdentifierNameSyntax (IdentifierName)
                    Code: locked
                    BlockSyntax (Block)
                    Code: {
			Safe.Alarm();
		}
                        ExpressionStatementSyntax (ExpressionStatement)
                        Code: Safe.Alarm();
                            InvocationExpressionSyntax (InvocationExpression)
                            Code: Safe.Alarm()
                                MemberAccessExpressionSyntax (SimpleMemberAccessExpression)
                                Code: Safe.Alarm
                                    IdentifierNameSyntax (IdentifierName)
                                    Code: Safe
                                    IdentifierNameSyntax (IdentifierName)
                                    Code: Alarm
                                ArgumentListSyntax (ArgumentList)
                                Code: ()
                    ElseClauseSyntax (ElseClause)
                    Code: else
		{
			Safe.Open();
		}
                        BlockSyntax (Block)
                        Code: {
			Safe.Open();
		}
                            ExpressionStatementSyntax (ExpressionStatement)
                            Code: Safe.Open();
                                InvocationExpressionSyntax (InvocationExpression)
                                Code: Safe.Open()
                                    MemberAccessExpressionSyntax (SimpleMemberAccessExpression)
                                    Code: Safe.Open
                                        IdentifierNameSyntax (IdentifierName)
                                        Code: Safe
                                        IdentifierNameSyntax (IdentifierName)
                                        Code: Open
                                    ArgumentListSyntax (ArgumentList)
                                    Code: ()
