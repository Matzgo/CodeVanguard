CompilationUnitSyntax (CompilationUnit)
Code: using Game;
using System;
using System.Collections.Generic;
using Console = Game.Console;
using Crane = Game.Crane;

public class Antenna
{

	public List<int> SortNumbers(List<int> numbers)
	{
List<int> sortedNumbers = new List<int>(numbers); // Clone to avoid modifying the original list
        int n = sortedNumbers.Count;

        for (int i = 0; i < n - 1; i++)
        {
            int minIndex = i; // Assume current index is the smallest

            // Find the minimum element in the remaining list
            for (int j = i + 1; j < n; j++)
            {
                if (sortedNumbers[j] < sortedNumbers[minIndex])
                {
                    minIndex = j; // Update index of the smallest value
                }
            }

            // Swap the found minimum element with the first element of the unsorted part
            int temp = sortedNumbers[i];
            sortedNumbers[i] = sortedNumbers[minIndex];
            sortedNumbers[minIndex] = temp;
        }

        return sortedNumbers;
	}
}
    UsingDirectiveSyntax (UsingDirective)
    Code: using Game;
        IdentifierNameSyntax (IdentifierName)
        Code: Game
    UsingDirectiveSyntax (UsingDirective)
    Code: using System;
        IdentifierNameSyntax (IdentifierName)
        Code: System
    UsingDirectiveSyntax (UsingDirective)
    Code: using System.Collections.Generic;
        QualifiedNameSyntax (QualifiedName)
        Code: System.Collections.Generic
            QualifiedNameSyntax (QualifiedName)
            Code: System.Collections
                IdentifierNameSyntax (IdentifierName)
                Code: System
                IdentifierNameSyntax (IdentifierName)
                Code: Collections
            IdentifierNameSyntax (IdentifierName)
            Code: Generic
    UsingDirectiveSyntax (UsingDirective)
    Code: using Console = Game.Console;
        NameEqualsSyntax (NameEquals)
        Code: Console =
            IdentifierNameSyntax (IdentifierName)
            Code: Console
        QualifiedNameSyntax (QualifiedName)
        Code: Game.Console
            IdentifierNameSyntax (IdentifierName)
            Code: Game
            IdentifierNameSyntax (IdentifierName)
            Code: Console
    UsingDirectiveSyntax (UsingDirective)
    Code: using Crane = Game.Crane;
        NameEqualsSyntax (NameEquals)
        Code: Crane =
            IdentifierNameSyntax (IdentifierName)
            Code: Crane
        QualifiedNameSyntax (QualifiedName)
        Code: Game.Crane
            IdentifierNameSyntax (IdentifierName)
            Code: Game
            IdentifierNameSyntax (IdentifierName)
            Code: Crane
    ClassDeclarationSyntax (ClassDeclaration)
    Code: public class Antenna
{

	public List<int> SortNumbers(List<int> numbers)
	{
List<int> sortedNumbers = new List<int>(numbers); // Clone to avoid modifying the original list
        int n = sortedNumbers.Count;

        for (int i = 0; i < n - 1; i++)
        {
            int minIndex = i; // Assume current index is the smallest

            // Find the minimum element in the remaining list
            for (int j = i + 1; j < n; j++)
            {
                if (sortedNumbers[j] < sortedNumbers[minIndex])
                {
                    minIndex = j; // Update index of the smallest value
                }
            }

            // Swap the found minimum element with the first element of the unsorted part
            int temp = sortedNumbers[i];
            sortedNumbers[i] = sortedNumbers[minIndex];
            sortedNumbers[minIndex] = temp;
        }

        return sortedNumbers;
	}
}
        MethodDeclarationSyntax (MethodDeclaration)
        Code: public List<int> SortNumbers(List<int> numbers)
	{
List<int> sortedNumbers = new List<int>(numbers); // Clone to avoid modifying the original list
        int n = sortedNumbers.Count;

        for (int i = 0; i < n - 1; i++)
        {
            int minIndex = i; // Assume current index is the smallest

            // Find the minimum element in the remaining list
            for (int j = i + 1; j < n; j++)
            {
                if (sortedNumbers[j] < sortedNumbers[minIndex])
                {
                    minIndex = j; // Update index of the smallest value
                }
            }

            // Swap the found minimum element with the first element of the unsorted part
            int temp = sortedNumbers[i];
            sortedNumbers[i] = sortedNumbers[minIndex];
            sortedNumbers[minIndex] = temp;
        }

        return sortedNumbers;
	}
            GenericNameSyntax (GenericName)
            Code: List<int>
                TypeArgumentListSyntax (TypeArgumentList)
                Code: <int>
                    PredefinedTypeSyntax (PredefinedType)
                    Code: int
            ParameterListSyntax (ParameterList)
            Code: (List<int> numbers)
                ParameterSyntax (Parameter)
                Code: List<int> numbers
                    GenericNameSyntax (GenericName)
                    Code: List<int>
                        TypeArgumentListSyntax (TypeArgumentList)
                        Code: <int>
                            PredefinedTypeSyntax (PredefinedType)
                            Code: int
            BlockSyntax (Block)
            Code: {
List<int> sortedNumbers = new List<int>(numbers); // Clone to avoid modifying the original list
        int n = sortedNumbers.Count;

        for (int i = 0; i < n - 1; i++)
        {
            int minIndex = i; // Assume current index is the smallest

            // Find the minimum element in the remaining list
            for (int j = i + 1; j < n; j++)
            {
                if (sortedNumbers[j] < sortedNumbers[minIndex])
                {
                    minIndex = j; // Update index of the smallest value
                }
            }

            // Swap the found minimum element with the first element of the unsorted part
            int temp = sortedNumbers[i];
            sortedNumbers[i] = sortedNumbers[minIndex];
            sortedNumbers[minIndex] = temp;
        }

        return sortedNumbers;
	}
                LocalDeclarationStatementSyntax (LocalDeclarationStatement)
                Code: List<int> sortedNumbers = new List<int>(numbers); // Clone to avoid modifying the original list
                    VariableDeclarationSyntax (VariableDeclaration)
                    Code: List<int> sortedNumbers = new List<int>(numbers)
                        GenericNameSyntax (GenericName)
                        Code: List<int>
                            TypeArgumentListSyntax (TypeArgumentList)
                            Code: <int>
                                PredefinedTypeSyntax (PredefinedType)
                                Code: int
                        VariableDeclaratorSyntax (VariableDeclarator)
                        Code: sortedNumbers = new List<int>(numbers)
                            EqualsValueClauseSyntax (EqualsValueClause)
                            Code: = new List<int>(numbers)
                                ObjectCreationExpressionSyntax (ObjectCreationExpression)
                                Code: new List<int>(numbers)
                                    GenericNameSyntax (GenericName)
                                    Code: List<int>
                                        TypeArgumentListSyntax (TypeArgumentList)
                                        Code: <int>
                                            PredefinedTypeSyntax (PredefinedType)
                                            Code: int
                                    ArgumentListSyntax (ArgumentList)
                                    Code: (numbers)
                                        ArgumentSyntax (Argument)
                                        Code: numbers
                                            IdentifierNameSyntax (IdentifierName)
                                            Code: numbers
                LocalDeclarationStatementSyntax (LocalDeclarationStatement)
                Code: int n = sortedNumbers.Count;
                    VariableDeclarationSyntax (VariableDeclaration)
                    Code: int n = sortedNumbers.Count
                        PredefinedTypeSyntax (PredefinedType)
                        Code: int
                        VariableDeclaratorSyntax (VariableDeclarator)
                        Code: n = sortedNumbers.Count
                            EqualsValueClauseSyntax (EqualsValueClause)
                            Code: = sortedNumbers.Count
                                MemberAccessExpressionSyntax (SimpleMemberAccessExpression)
                                Code: sortedNumbers.Count
                                    IdentifierNameSyntax (IdentifierName)
                                    Code: sortedNumbers
                                    IdentifierNameSyntax (IdentifierName)
                                    Code: Count
                ForStatementSyntax (ForStatement)
                Code: for (int i = 0; i < n - 1; i++)
        {
            int minIndex = i; // Assume current index is the smallest

            // Find the minimum element in the remaining list
            for (int j = i + 1; j < n; j++)
            {
                if (sortedNumbers[j] < sortedNumbers[minIndex])
                {
                    minIndex = j; // Update index of the smallest value
                }
            }

            // Swap the found minimum element with the first element of the unsorted part
            int temp = sortedNumbers[i];
            sortedNumbers[i] = sortedNumbers[minIndex];
            sortedNumbers[minIndex] = temp;
        }
                    VariableDeclarationSyntax (VariableDeclaration)
                    Code: int i = 0
                        PredefinedTypeSyntax (PredefinedType)
                        Code: int
                        VariableDeclaratorSyntax (VariableDeclarator)
                        Code: i = 0
                            EqualsValueClauseSyntax (EqualsValueClause)
                            Code: = 0
                                LiteralExpressionSyntax (NumericLiteralExpression)
                                Code: 0
                    BinaryExpressionSyntax (LessThanExpression)
                    Code: i < n - 1
                        IdentifierNameSyntax (IdentifierName)
                        Code: i
                        BinaryExpressionSyntax (SubtractExpression)
                        Code: n - 1
                            IdentifierNameSyntax (IdentifierName)
                            Code: n
                            LiteralExpressionSyntax (NumericLiteralExpression)
                            Code: 1
                    PostfixUnaryExpressionSyntax (PostIncrementExpression)
                    Code: i++
                        IdentifierNameSyntax (IdentifierName)
                        Code: i
                    BlockSyntax (Block)
                    Code: {
            int minIndex = i; // Assume current index is the smallest

            // Find the minimum element in the remaining list
            for (int j = i + 1; j < n; j++)
            {
                if (sortedNumbers[j] < sortedNumbers[minIndex])
                {
                    minIndex = j; // Update index of the smallest value
                }
            }

            // Swap the found minimum element with the first element of the unsorted part
            int temp = sortedNumbers[i];
            sortedNumbers[i] = sortedNumbers[minIndex];
            sortedNumbers[minIndex] = temp;
        }
                        LocalDeclarationStatementSyntax (LocalDeclarationStatement)
                        Code: int minIndex = i; // Assume current index is the smallest
                            VariableDeclarationSyntax (VariableDeclaration)
                            Code: int minIndex = i
                                PredefinedTypeSyntax (PredefinedType)
                                Code: int
                                VariableDeclaratorSyntax (VariableDeclarator)
                                Code: minIndex = i
                                    EqualsValueClauseSyntax (EqualsValueClause)
                                    Code: = i
                                        IdentifierNameSyntax (IdentifierName)
                                        Code: i
                        ForStatementSyntax (ForStatement)
                        Code: // Find the minimum element in the remaining list
            for (int j = i + 1; j < n; j++)
            {
                if (sortedNumbers[j] < sortedNumbers[minIndex])
                {
                    minIndex = j; // Update index of the smallest value
                }
            }
                            VariableDeclarationSyntax (VariableDeclaration)
                            Code: int j = i + 1
                                PredefinedTypeSyntax (PredefinedType)
                                Code: int
                                VariableDeclaratorSyntax (VariableDeclarator)
                                Code: j = i + 1
                                    EqualsValueClauseSyntax (EqualsValueClause)
                                    Code: = i + 1
                                        BinaryExpressionSyntax (AddExpression)
                                        Code: i + 1
                                            IdentifierNameSyntax (IdentifierName)
                                            Code: i
                                            LiteralExpressionSyntax (NumericLiteralExpression)
                                            Code: 1
                            BinaryExpressionSyntax (LessThanExpression)
                            Code: j < n
                                IdentifierNameSyntax (IdentifierName)
                                Code: j
                                IdentifierNameSyntax (IdentifierName)
                                Code: n
                            PostfixUnaryExpressionSyntax (PostIncrementExpression)
                            Code: j++
                                IdentifierNameSyntax (IdentifierName)
                                Code: j
                            BlockSyntax (Block)
                            Code: {
                if (sortedNumbers[j] < sortedNumbers[minIndex])
                {
                    minIndex = j; // Update index of the smallest value
                }
            }
                                IfStatementSyntax (IfStatement)
                                Code: if (sortedNumbers[j] < sortedNumbers[minIndex])
                {
                    minIndex = j; // Update index of the smallest value
                }
                                    BinaryExpressionSyntax (LessThanExpression)
                                    Code: sortedNumbers[j] < sortedNumbers[minIndex]
                                        ElementAccessExpressionSyntax (ElementAccessExpression)
                                        Code: sortedNumbers[j]
                                            IdentifierNameSyntax (IdentifierName)
                                            Code: sortedNumbers
                                            BracketedArgumentListSyntax (BracketedArgumentList)
                                            Code: [j]
                                                ArgumentSyntax (Argument)
                                                Code: j
                                                    IdentifierNameSyntax (IdentifierName)
                                                    Code: j
                                        ElementAccessExpressionSyntax (ElementAccessExpression)
                                        Code: sortedNumbers[minIndex]
                                            IdentifierNameSyntax (IdentifierName)
                                            Code: sortedNumbers
                                            BracketedArgumentListSyntax (BracketedArgumentList)
                                            Code: [minIndex]
                                                ArgumentSyntax (Argument)
                                                Code: minIndex
                                                    IdentifierNameSyntax (IdentifierName)
                                                    Code: minIndex
                                    BlockSyntax (Block)
                                    Code: {
                    minIndex = j; // Update index of the smallest value
                }
                                        ExpressionStatementSyntax (ExpressionStatement)
                                        Code: minIndex = j; // Update index of the smallest value
                                            AssignmentExpressionSyntax (SimpleAssignmentExpression)
                                            Code: minIndex = j
                                                IdentifierNameSyntax (IdentifierName)
                                                Code: minIndex
                                                IdentifierNameSyntax (IdentifierName)
                                                Code: j
                        LocalDeclarationStatementSyntax (LocalDeclarationStatement)
                        Code: // Swap the found minimum element with the first element of the unsorted part
            int temp = sortedNumbers[i];
                            VariableDeclarationSyntax (VariableDeclaration)
                            Code: // Swap the found minimum element with the first element of the unsorted part
            int temp = sortedNumbers[i]
                                PredefinedTypeSyntax (PredefinedType)
                                Code: // Swap the found minimum element with the first element of the unsorted part
            int
                                VariableDeclaratorSyntax (VariableDeclarator)
                                Code: temp = sortedNumbers[i]
                                    EqualsValueClauseSyntax (EqualsValueClause)
                                    Code: = sortedNumbers[i]
                                        ElementAccessExpressionSyntax (ElementAccessExpression)
                                        Code: sortedNumbers[i]
                                            IdentifierNameSyntax (IdentifierName)
                                            Code: sortedNumbers
                                            BracketedArgumentListSyntax (BracketedArgumentList)
                                            Code: [i]
                                                ArgumentSyntax (Argument)
                                                Code: i
                                                    IdentifierNameSyntax (IdentifierName)
                                                    Code: i
                        ExpressionStatementSyntax (ExpressionStatement)
                        Code: sortedNumbers[i] = sortedNumbers[minIndex];
                            AssignmentExpressionSyntax (SimpleAssignmentExpression)
                            Code: sortedNumbers[i] = sortedNumbers[minIndex]
                                ElementAccessExpressionSyntax (ElementAccessExpression)
                                Code: sortedNumbers[i]
                                    IdentifierNameSyntax (IdentifierName)
                                    Code: sortedNumbers
                                    BracketedArgumentListSyntax (BracketedArgumentList)
                                    Code: [i]
                                        ArgumentSyntax (Argument)
                                        Code: i
                                            IdentifierNameSyntax (IdentifierName)
                                            Code: i
                                ElementAccessExpressionSyntax (ElementAccessExpression)
                                Code: sortedNumbers[minIndex]
                                    IdentifierNameSyntax (IdentifierName)
                                    Code: sortedNumbers
                                    BracketedArgumentListSyntax (BracketedArgumentList)
                                    Code: [minIndex]
                                        ArgumentSyntax (Argument)
                                        Code: minIndex
                                            IdentifierNameSyntax (IdentifierName)
                                            Code: minIndex
                        ExpressionStatementSyntax (ExpressionStatement)
                        Code: sortedNumbers[minIndex] = temp;
                            AssignmentExpressionSyntax (SimpleAssignmentExpression)
                            Code: sortedNumbers[minIndex] = temp
                                ElementAccessExpressionSyntax (ElementAccessExpression)
                                Code: sortedNumbers[minIndex]
                                    IdentifierNameSyntax (IdentifierName)
                                    Code: sortedNumbers
                                    BracketedArgumentListSyntax (BracketedArgumentList)
                                    Code: [minIndex]
                                        ArgumentSyntax (Argument)
                                        Code: minIndex
                                            IdentifierNameSyntax (IdentifierName)
                                            Code: minIndex
                                IdentifierNameSyntax (IdentifierName)
                                Code: temp
                ReturnStatementSyntax (ReturnStatement)
                Code: return sortedNumbers;
                    IdentifierNameSyntax (IdentifierName)
                    Code: sortedNumbers
